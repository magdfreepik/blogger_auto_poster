name: Blogger Auto Poster (Baghdad 10:00 & 18:00)

on:
  schedule:
    # GitHub Actions بتوقيت UTC
    # بغداد = UTC+3 ⇒ 10:00 = 07:00 UTC ، 18:00 = 15:00 UTC
    - cron: "0 7 * * *"   # صباحًا (slot 0)
    - cron: "0 15 * * *"  # مساءً (slot 1)
  workflow_dispatch:
    inputs:
      slot:
        description: "0 = صباح (10:00 بغداد) | 1 = مساء (18:00 بغداد)"
        required: true
        default: "0"

permissions:
  contents: read

# منع تشغيلين متوازيين
concurrency:
  group: blogger-auto-publisher
  cancel-in-progress: true

env:
  GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
  BLOG_URL:         ${{ secrets.BLOG_URL }}
  CLIENT_ID:        ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET:    ${{ secrets.CLIENT_SECRET }}
  REFRESH_TOKEN:    ${{ secrets.REFRESH_TOKEN }}
  PUBLISH_MODE:     live
  TZ:               Asia/Baghdad

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Resolve slot
        id: slot
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SLOT="${{ github.event.inputs.slot }}"
          else
            case "${{ github.event.schedule }}" in
              "0 7 * * *")  SLOT="0" ;;
              "0 15 * * *") SLOT="1" ;;
              *)            SLOT="0" ;;
            esac
          fi
          echo "slot=$SLOT" >> "$GITHUB_OUTPUT"
          echo "Resolved SLOT=$SLOT"

      - name: Post to Blogger (idempotent: update-or-insert)
        env:
          SLOT: ${{ steps.slot.outputs.slot }}
        run: |
          python - <<EOF
          import os, sys
          from main import make_article_once

          try:
              slot = int(os.environ.get("SLOT", "0"))
              if slot not in (0, 1):
                  raise ValueError("Invalid slot value")
              make_article_once(slot)
              print("✅ Article generated successfully.")
          except Exception as e:
              print("❌ ERROR:", e, file=sys.stderr)
              sys.exit(1)
          EOF
